@using Pokewordle.Shared.Extensions;


<link href="/css/pokecss/SearchBox.css" rel="stylesheet" />
<div id="game-input">
    <div class="dropdown-wrapper">
        <input class="pokemon-input" @bind-value="ValueProperty" @onkeyup="InputKeyUp" @onkeydown="InputKeyDown" @oninput="InputChange" disabled="@isDisabled"
               @onfocusin="(() => isDropdownVisible = true)"
               @onfocusout="DelayedHideDropdown"
               />
        @if (isDropdownVisible) {
            <div class="dropdown-inner-wrapper">
                <div class="pokemon-dropdown-container">
                    @for (int i = 0; i < DisplayItemsList.Count; i++)
                    {
                        string item = DisplayItemsList[i];
                        if (i >= _dropdownIndex - 1)
                        {
                            var iCopyForRazor = i;
                            if (i == _dropdownIndex)
                            {
                                <div class="pokemonItem" id="selectedPokemon" @onclick="(() => ClickValue(iCopyForRazor))">@item.FirstCharToUpper()</div>
                            }
                            else
                            {
                                <div class="pokemonItem" @onclick="(() => ClickValue(iCopyForRazor))">@item.FirstCharToUpper()</div>
                            }
                        }
                    }
                </div>
            </div>
        }
    </div>
</div>


@code {
    [Parameter]
    [EditorRequired]
    public List<string> ItemList { get; set; } = new();

    private readonly List<string> DisplayItemsList = new();

    [Parameter]
    [EditorRequired]
    public EventCallback<string> ValueChanged { get; set; }

    private bool isDropdownVisible = false;

    private bool isDisabled = false;

    private string _value = "";
    public string ValueProperty { get => _value; set => SetValue(value); }


    protected override void OnInitialized()
    {
        DisplayItemsList.AddRange(ItemList);
    }

    private async void DelayedHideDropdown()
    {
        await Task.Delay(400);
        isDropdownVisible = false;
        StateHasChanged();
    }

    private void ClickValue(int i)
    {
        Console.WriteLine($"Click {i}");
        if (0 <= i && i < DisplayItemsList.Count)
        {
            Console.WriteLine($"Click => {DisplayItemsList[i]}");
            SubmitValue(DisplayItemsList[i]);
        } else
        {
            if (DisplayItemsList.Contains(_value))
            {
                SubmitValue(_value);
            }
        }
    }

    private int _dropdownIndex = -1;

    private void UpdateDisplayedItems(string inputValue)
    {
        DisplayItemsList.Clear();
        foreach (string item in ItemList)
        {
            if (item.Contains(inputValue, StringComparison.OrdinalIgnoreCase))
            {
                DisplayItemsList.Add(item);
            }
        }
    }

    private void InputChange(ChangeEventArgs value)
    {
        if (value.Value is not string inputValue)
        {
            Console.WriteLine("Ignoring non string input.");
            return;
        }

        UpdateDisplayedItems(inputValue);
    }

    private void InputKeyDown(KeyboardEventArgs value)
    {
        isDropdownVisible = true;
        if (value.Code.Equals("Enter") || value.Code.Equals("NumpadEnter"))
        {
            Console.WriteLine("Enter");
            if (DisplayItemsList.Count == 1)
            {
                Console.WriteLine("Enter -> Click 0");
                ClickValue(0);
            } else
            {
                ClickValue(_dropdownIndex);
            }
        }
    }

    private void InputKeyUp(KeyboardEventArgs value)
    {
        if (value.Code.Equals("ArrowDown"))
        {
            _dropdownIndex = Math.Min(_dropdownIndex + 1, DisplayItemsList.Count - 1);
            return;
        }
        if (value.Code.Equals("ArrowUp"))
        {
            _dropdownIndex = Math.Max(_dropdownIndex - 1, -1);
            return;
        }
        _dropdownIndex = -1;
    }

    private void SubmitValue(string value)
    {
        if (ItemList.Contains(value))
        {
            isDropdownVisible = false;
            _value = "";
            UpdateDisplayedItems("");
            StateHasChanged();
            ValueChanged.InvokeAsync(value);
        }
    }

    private void SetValue(string value)
    {
        _value = value;
    }

    public void Enable()
    {
        isDisabled = false;
        StateHasChanged();
    }

    public void Disable()
    {
        isDisabled = true;
        StateHasChanged();
    }

    public void SetValueDontTriggerEvent(string value)
    {
        _value = value;
    }

}