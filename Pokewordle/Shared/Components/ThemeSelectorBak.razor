@using System.ComponentModel.DataAnnotations
@using Microsoft.Fast.Components.FluentUI
@using Microsoft.Fast.Components.FluentUI.DesignTokens
@using Pokewordle.Shared.Extensions
@using Color = System.Drawing.Color
@using Pokewordle.Shared.Util;
@inject HttpClient httpClient;
@inject NavigationManager NavigationManager;
@inject SharedSettings SharedSettings;


<link href="/css/pokecss/SearchBox.css" rel="stylesheet"/>
<div id="language-input fluent-combo-box">
    <FluentCombobox @ref="ThemeComboBox" TOption="string" Items="@Themes" 
                        Autocomplete="ComboboxAutocomplete.Both"
                    SelectedOptionChanged="@ValueChangedHandler"
                    Appearance="Appearance.Filled"
                    Id="theme-input" Style="width:13rem; height: 2rem">
    </FluentCombobox>
</div>

@code {
    private FluentCombobox<string> ThemeComboBox;

    private List<string> Themes = Enum.GetValues<Theme>().ToList().ConvertAll(s => s.ToString());
    
    // fluentui design tokens
    [Inject]
    private BaseLayerLuminance BaseLayerLuminance { get; set; } = default!;

    [Inject]
    private AccentBaseColor AccentBaseColor { get; set; } = default!;

    [Inject]
    private BodyFont BodyFont { get; set; } = default!;

    [Inject]
    private StrokeWidth StrokeWidth { get; set; } = default!;

    [Inject]
    private ControlCornerRadius ControlCornerRadius { get; set; } = default!;

    [Inject]
    private FillColor FillColor { get; set; } = default!;

    // private Microsoft.Fast.Components.FluentUI.DesignTokens.FillColor fill
    // Microsoft.Fast.Components.FluentUI.DesignTokens.Neutral
    [Inject]
    private StrokeWidth Strokewidth { get; set; } = default!;

    // Microsoft.Fast.Components.FluentUI.DesignTokens.Swatch
    [Inject]
    NeutralFillActive NeutralFillActive { get; set; } = default!;

    [Inject]
    NeutralBaseColor NeutralBaseColor { get; set; } = default!;

    [Inject]
    NeutralFillRest NeutralFillRest { get; set; } = default!;

    protected override void OnInitialized() {
        
        // Write all elements to Console in foreach
        Console.WriteLine("Selected theme: " + SharedSettings.SelectedTheme);
    }
    
    private void ValueChangedHandler(string value)
    {
        Console.WriteLine("Selected theme changed: " + value);
        SharedSettings.SelectedTheme = ThemeUtils.FromString(value);
        
        NavigationManager.NavigateTo("/settings");
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AccentBaseColor.SetValueFor(ThemeComboBox!.Element, "#0c4337".ToSwatch());
            await BaseLayerLuminance.SetValueFor(ThemeComboBox!.Element, (float)0.15);
            await NeutralBaseColor.SetValueFor(ThemeComboBox!.Element, "#2b3539".ToSwatch());

            StateHasChanged();
        }
    }

}