@page "/fetchdata"
@using PokeApiNet
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject PokeApiClient PokeClient

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<div id="game-container">
    <img id="pokemon-image" src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/1.svg" alt="Pokemon" />
    <h2 id="pokemon-name">Bulbasaur</h2>
    
    <input id="txtWord" name="txtWord" placeholder="Enter your text"
           value="@value" @onchange="onChange"/>


    @if (pokemonToGuess == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table id="game-table">
            <thead>
                <tr>
                    <th>Pokémon</th>
                    <th>Type 1</th>
                    <th>Type 2</th>
                    <th>Gen</th>
                    <th>Height (m)</th>
                    <th>Weight (kg)</th>
                    <th>Evolution</th>
                    <th>Abilities</th>
                </tr>
            </thead>

            <tbody>

                @foreach (var guess in displayData)
                {
                    Console.WriteLine(guess.ToRowString(displayedColumns));
                    @((MarkupString)guess.ToRowString(displayedColumns));
                }
            </tbody>
        </table>
    }

</div>

@code {
    private static string value = "aaa";

    private PokeData? pokemonToGuess;
    private List<PokeData> pokemonsGuessed = new();
    private GuessDisplayData[] displayData = new GuessDisplayData[0];

    private List<string> pokemonTypes = new ();

    private List<ColumnType> displayedColumns = new() { ColumnType.NAME, ColumnType.HEIGHT, ColumnType.WEIGHT };

    private async Task onChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (args.Value is null)
        {
            return;
        }

        string guess = (string)args.Value;

        Console.WriteLine(guess);
        await AttemptGuess(guess);
    }

    protected override async Task OnInitializedAsync()
    {
        pokemonToGuess = await LoadPokemon(1);
    }

    private void AddGuessedPokemon(PokeData guessPokeData)
    {
        if (pokemonToGuess is null)
        {
            return;
        }

        GuessDisplayData guessDisplayData = new GuessDisplayData(pokemonToGuess, guessPokeData);
        GuessDisplayData[] newDisplayData = new GuessDisplayData[displayData.Length + 1];
        displayData.CopyTo(newDisplayData, 0);
        newDisplayData[displayData.Length] = guessDisplayData;

        pokemonsGuessed.Add(guessPokeData);
        displayData = newDisplayData;
        //Console.WriteLine(guessDisplayData.ToRowString(displayedColumns));
        StateHasChanged();
    }

    private async Task AttemptGuess(int id)
    {
        PokeData guessPokeData = await LoadPokemon(id);
        AddGuessedPokemon(guessPokeData);
    }
    private async Task AttemptGuess(string name)
    {
        PokeData guessPokeData = await LoadPokemon(name);
        AddGuessedPokemon(guessPokeData);
    }
    private async Task<PokeData> LoadPokemon(int id)
    {
        Pokemon pokemon = await PokeClient.GetResourceAsync<Pokemon>(id);
        return new PokeData(pokemon);
    }
    private async Task<PokeData> LoadPokemon(string name)
    {
        Pokemon pokemon = await PokeClient.GetResourceAsync<Pokemon>(name);
        return new PokeData(pokemon);
    }
}
