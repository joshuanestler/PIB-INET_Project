@page "/fetchdata"
@using PokeApiNet
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject PokeApiClient PokeClient

<PageTitle>Guess a Pokemon</PageTitle>

<h1>Guess a Pokemon</h1>

<div id="game-container">
    <input id="txtWord" name="txtWord" placeholder="Enter your guess"
           value="@value" @onchange="onChange"/>


    @if (pokemonToGuess == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table id="game-table">
            <thead>
                @((MarkupString)HeaderGenerator.ToHeaderString(displayedColumns))
            </thead>

            <tbody>
                @foreach (var guess in displayData)
                {
                    //Console.WriteLine(guess.ToRowString(displayedColumns));
                    //@((MarkupString)guess.ToRowString(displayedColumns));
                    <Pokewordle.Components.Cells.TemplateRow TableCells=guess.GetTableCells(displayedColumns)></Pokewordle.Components.Cells.TemplateRow>
                }
            </tbody>
        </table>
    }

</div>

@code {
    private static string value = "";

    private PokeData? pokemonToGuess;
    private List<PokeData> pokemonsGuessed = new();
    private List<GuessDisplayData> displayData = new();

    private List<string> pokemonTypes = new ();

    private List<ColumnType> displayedColumns = new() { ColumnType.NAME, ColumnType.TYPE1, ColumnType.TYPE2, ColumnType.HEIGHT, ColumnType.WEIGHT };

    private async Task onChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (args.Value is null)
        {
            return;
        }

        string guess = (string)args.Value;

        if (!pokemonTypes.Contains(guess))
        {
            Console.WriteLine($"Cannot guess: {guess}");
            //TODO: Fetch pokemonTypes and then add return again;
            //return;
        }

        Console.WriteLine($"Guessing: {guess}");
        await AttemptGuess(guess);
    }

    protected override async Task OnInitializedAsync()
    {
        pokemonToGuess = await LoadPokemon(1);
    }

    private void AddGuessedPokemon(PokeData guessPokeData)
    {
        if (pokemonToGuess is null)
        {
            return;
        }

        GuessDisplayData guessDisplayData = new GuessDisplayData(pokemonToGuess, guessPokeData);
        displayData.Add(guessDisplayData);
        pokemonsGuessed.Add(guessPokeData);
        //Console.WriteLine(guessDisplayData.ToRowString(displayedColumns));
        //StateHasChanged();
    }

    private async Task AttemptGuess(int id)
    {
        PokeData guessPokeData = await LoadPokemon(id);
        AddGuessedPokemon(guessPokeData);
    }
    private async Task AttemptGuess(string name)
    {
        PokeData guessPokeData = await LoadPokemon(name);
        AddGuessedPokemon(guessPokeData);
    }
    private async Task<PokeData> LoadPokemon(int id)
    {
        Pokemon pokemon = await PokeClient.GetResourceAsync<Pokemon>(id);
        return new PokeData(pokemon);
    }
    private async Task<PokeData> LoadPokemon(string name)
    {
        Pokemon pokemon = await PokeClient.GetResourceAsync<Pokemon>(name);
        return new PokeData(pokemon);
    }

}
