@page "/"

@using PokeApiNet
@using Pokewordle.Components.Cells
@using Pokewordle.Shared.GuessDisplayData;
@using Pokewordle.Shared.PokemonData;
@inject PokeApiClient PokeClient

<PageTitle>Guess a Pokemon</PageTitle>

<h1>Guess a Pokemon</h1>

<div id="game-container">

    @if (pokemonToGuess == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <PokemonGuessForm @ref="guessForm" PokemonNames="pokemonTypes" ValueChanged="AttemptGuess"></PokemonGuessForm>
        
        <table id="game-table">
            <thead>
                @((MarkupString)HeaderGenerator.ToHeaderString(displayedColumns))
            </thead>

            <tbody>
                @foreach (IGuessDisplayData guess in displayData)
                {
                    //Console.WriteLine(guess.ToRowString(displayedColumns));
                    //@((MarkupString)guess.ToRowString(displayedColumns));
                    <TemplateRow TableCellsTask=@guess.GetRowCells(displayedColumns)></TemplateRow>
                }
            </tbody>
        </table>
    }

</div>

@code {
    private PokemonGuessForm guessForm;
    private static string value = "";

    private IPokeData? pokemonToGuess;
    private List<IPokeData> pokemonsGuessed = new();
    private List<IGuessDisplayData> displayData = new();

    private List<string> pokemonTypes = new ();

    private List<ColumnType> displayedColumns = new() { ColumnType.NAME, ColumnType.GENERATION, ColumnType.TYPES, ColumnType.TYPE1, ColumnType.TYPE2, ColumnType.HEIGHT, ColumnType.WEIGHT };

    protected override async Task OnInitializedAsync()
    {
        // Load pokedex data
        Pokedex pokedex = await PokeClient.GetResourceAsync<Pokedex>(1);
        pokemonTypes = pokedex.PokemonEntries.Select(p => p.PokemonSpecies.Name).ToList();

        System.Random random = new();
        pokemonToGuess = await LoadPokemon(pokemonTypes[random.Next(pokemonTypes.Count)]);
    }

    private void AddGuessedPokemon(IPokeData guessPokeData)
    {
        if (pokemonToGuess is null)
        {
            return;
        }

        IGuessDisplayData guessDisplayData = new LazyGuessDisplayData(pokemonToGuess, guessPokeData);
        displayData.Add(guessDisplayData);
        pokemonsGuessed.Add(guessPokeData);
        
        // Check if the user guessed the correct pokemon
        if (guessPokeData.Name == pokemonToGuess.Name)
        {
            WinGame();
        }
        
        //Console.WriteLine(guessDisplayData.ToRowString(displayedColumns));
        //StateHasChanged();
    }

    private async Task AttemptGuess(int id)
    {
        IPokeData guessPokeData = await LoadPokemon(id);
        AddGuessedPokemon(guessPokeData);
    }
    private async Task AttemptGuess(string name) {
        IPokeData guessPokeData = await LoadPokemon(name.ToLower());
        AddGuessedPokemon(guessPokeData);
    }
    private async Task<IPokeData> LoadPokemon(int id)
    {
        Pokemon pokemon = await PokeClient.GetResourceAsync<Pokemon>(id);
        PokeApiClient client = PokeClient;
        return new FetchablePokeData(pokemon, PokeClient);
    }
    private async Task<IPokeData> LoadPokemon(string name)
    {
        Pokemon pokemon = await PokeClient.GetResourceAsync<Pokemon>(name);
        return new FetchablePokeData(pokemon, PokeClient);
    }

    /// <summary>
    /// Called when the user guesses the correct pokemon
    /// </summary>
    private void WinGame() {
        guessForm.Disable();
    }
}
