@page "/"
@using PokeApiNet
@using Pokewordle.Components.Cells
@using Pokewordle.Shared.GuessDisplayData;
@using Pokewordle.Shared.PokemonData;
@using Microsoft.Fast.Components.FluentUI;
@using Microsoft.Fast.Components.FluentUI.DesignTokens
@using Pokewordle.Shared.Util;
@inject PokeApiClient PokeClient;
@inject HttpClient HttpClient;

<div class="page-content">
    <PageTitle>Guess a Pokemon</PageTitle>
    @* <SimpleRow/> *@

    <link href="/css/pokecss/table.css" rel="stylesheet"/>
    @if (_pokemonToGuess == null)
    {
        <div style="display: grid; height: 100vh; justify-items: center; align-content: center;">
            <FluentProgressRing @ref="_FluentProgressRing" style="width: 10em; height: 10em;"></FluentProgressRing>
        </div>
    }
    else
    {
        Console.WriteLine("============================");
        <div id="game-container">
            <h1 class="game-title">Guess a Pokemon</h1>


            <PokemonGuessForm @ref="_pokemonGuessForm" ValueChanged="AttemptGuess" PokemonNames="_pokemonTypes"></PokemonGuessForm>

            <table id="game-table">
                <thead>
                    @(
                        (MarkupString)HeaderGenerator.ToHeaderString(SharedSettings.GameColumnTypes)
                        )
                </thead>

                <tbody>
                    @for (int i = 0; i < _displayData.Count; i++)
                    {
                        IGuessDisplayData guess = _displayData[i];
                        bool visible = true;
                        if (SharedSettings.GuessHistoryLimit > 0)
                        {
                            visible = _displayData.Count - i <= SharedSettings.GuessHistoryLimit;
                        }
                        Console.WriteLine(guess.GetPokemonName());
                        //Console.WriteLine(guess.ToRowString(displayedColumns));
                        //@((MarkupString)guess.ToRowString(displayedColumns));
                        <TemplateRow TableCellsTask=@guess.GetRowCells(SharedSettings.GameColumnTypes) ObfuscationList="@guess.GetObfuscationOrder(SharedSettings.GameColumnTypes)" Visible=visible></TemplateRow>
                    }
                </tbody>
            </table>

        </div>
    }
</div>

@code
{
    [Inject]
    private AccentBaseColor AccentBaseColor { get; set; } = default!;

    private FluentProgressRing _FluentProgressRing;

    private PokemonGuessForm? _pokemonGuessForm;

    private IPokeData? _pokemonToGuess;
    private Dictionary<string, IPokeData> _pokemonsGuessed = new();
    private readonly List<IGuessDisplayData> _displayData = new();

    private List<string> _pokemonTypes = new();

    /// <summary>
    /// Pokemons which have forms cannot be requested simply by their species name unfortunately
    /// TODO: This is a temporary workaround, find a better way to pull pokemon names to suggest for guessing.
    /// </summary>
    private static readonly List<string> _UnFixedNames = new() { "deoxys", "wormadam", "giratina", "shaymin", "basculin", "darmanitan", "tornadus", "thundurus", "landorus", "keldeo", "meloetta", "meowstic", "aegislash", "pumpkaboo", "gourgeist", "zygarde", "oricorio", "lycanroc", "wishiwashi", "minior", " mimikyu", " toxtricity", "eiscue", "indeedee", "morpeko", "urshifu", "basculegion", "enamorus" };
    private static readonly List<string> _FixedNames = new() { "deoxys-attack", "wormadam-trash", "giratina-origin", "shaymin-sky", "basculin-blue-striped", "darmanitan-standard", "tornadus-therian", "tornadus-therian", "tornadus-therian", "keledo-resolute", "meloetta-aria", "meowstic-female", "aegislash-shield", "pumpkaboo-average", "gourgeist-average", "zygarde-complete", "oricorio-baile", "lycanroc-midnight", "wishiwashi-school", "", "mimikyu-busted", "toxtricity-low-key", "eiscue-ice", "indeedee-male", "morpeko-full-belly", "urshifu-rapid-strike", "basculegion-male", "enamorus-incarnate" };

    protected override async Task OnInitializedAsync()
    {
        // Load pokedex data
        Console.WriteLine("A");
        _pokemonTypes = new();
        Console.WriteLine("B");
        List<string> tempPokemonNames = new List<string>();
        Console.WriteLine("C");
        Pokedex pokedex = await PokeClient.GetResourceAsync<Pokedex>(1);
        Console.WriteLine("D");
        foreach(PokemonEntry pokemon in pokedex.PokemonEntries)
        {
            tempPokemonNames.Add(pokemon.PokemonSpecies.Name);
        }
        Console.WriteLine("E");
        foreach (string pokemonName in tempPokemonNames)
        {
            int index = _UnFixedNames.IndexOf(pokemonName);
            if (index >= 0)
            {
                string? fixedPokemonName = _FixedNames[index];
                //Only add the fixed name if a solution has been found!
                if (fixedPokemonName is not null && !fixedPokemonName.Equals(string.Empty))
                {
                    _pokemonTypes.Add(fixedPokemonName);
                }
            }
            else
            {
                _pokemonTypes.Add(pokemonName);
            }
        }
        Console.WriteLine("F");

        System.Random random = new();
        _pokemonToGuess = await LoadPokemon(_pokemonTypes[random.Next(_pokemonTypes.Count)]);
        // await AttemptGuess("Venusaur");
        // await AttemptGuess("Charizard");
        // await AttemptGuess("Blastoise");
        // await AttemptGuess("Machoke");
        // await AttemptGuess("Scizor");

        if (HttpClient is null)
        {
            Console.WriteLine("Client is null");
        }

        Translations.LoadLanguage(HttpClient, 4);
    }

    private void AddGuessedPokemon(string guessedName, IPokeData guessPokeData)
    {
        if (_pokemonToGuess is null)
        {
            return;
        }

        IGuessDisplayData guessDisplayData = new LazyGuessDisplayData(_pokemonToGuess, guessPokeData);
        _displayData.Add(guessDisplayData);
        _pokemonsGuessed.Add(guessedName, guessPokeData);

        if (guessPokeData.Name == _pokemonToGuess.Name)
        {
            WinGame();
        }
    }

    private async Task AttemptGuess(string name)
    {
        if (_pokemonsGuessed.ContainsKey(name) && !SharedSettings.AllowDuplicateGuesses)
        {
            return;
        }
        IPokeData guessPokeData = await LoadPokemon(name);
        AddGuessedPokemon(name, guessPokeData);
    }

    private async Task<IPokeData> LoadPokemon(int id)
    {
        Pokemon pokemon = await PokeClient.GetResourceAsync<Pokemon>(id);
        PokeApiClient client = PokeClient;
        return new FetchablePokeData(pokemon, PokeClient);
    }

    private async Task<IPokeData> LoadPokemon(string name)
    {
        Pokemon pokemon = await PokeClient.GetResourceAsync<Pokemon>(name);
        return new FetchablePokeData(pokemon, PokeClient);
    }

    private void WinGame()
    {
        _pokemonGuessForm?.Disable();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AccentBaseColor.SetValueFor(_FluentProgressRing!.Element, "#064c3a".ToSwatch());
            StateHasChanged();
        }
    }
}