@page "/settings"
@using Pokewordle.Shared.Components
@using Pokewordle.Shared.Util;

<PageTitle>Settings</PageTitle>

<div class="content">
    <div class="language-wrapper">
        <p class="setting-title">Language</p>
        <div class="language-container">
            <LanguageSelector></LanguageSelector>
        </div>
    </div>

    <div class="column-selection-wrapper">
        <p class="setting-title">Choose Game Columns</p>
        <div class="column-selection-container">
            <div class="shown-columns column-container">
                <p class="column-container-title">Shown Columns</p>
                <div class="column-list">
                    @for (int i = 0; i < _selectedColumnTypes.Count; i++)
                    {
                        ColumnType columnType = _selectedColumnTypes[i];
                        if (_selectedType is not null)
                        {
                            <div class="insertIcon" onclick="@(() => InsertSelectedHeader(columnType))">
                                <svg xmlns="http://www.w3.org/2000/svg" width="1rem" height="1rem" fill="currentColor" class="bi bi-box-arrow-in-left" viewBox="0 0 16 16">
                                  <path fill-rule="evenodd" d="M10 3.5a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 1 1 0v2A1.5 1.5 0 0 1 9.5 14h-8A1.5 1.5 0 0 1 0 12.5v-9A1.5 1.5 0 0 1 1.5 2h8A1.5 1.5 0 0 1 11 3.5v2a.5.5 0 0 1-1 0v-2z"/>
                                  <path fill-rule="evenodd" d="M4.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H14.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3z"/>
                                </svg>
                            </div>
                        }
                        <div class="displayedColumn" onclick="@(() => DisableColumnHeader(columnType))">@HeaderGenerator.GetHeader(columnType)</div>
                    }
                    @if (_selectedType is not null)
                    {
                        <div class="insertIcon" onclick="@(() => AppendSelectedHeader())">
                            <svg xmlns="http://www.w3.org/2000/svg" width="1rem" height="1rem" fill="currentColor" class="bi bi-box-arrow-in-left" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M10 3.5a.5.5 0 0 0-.5-.5h-8a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5v-2a.5.5 0 0 1 1 0v2A1.5 1.5 0 0 1 9.5 14h-8A1.5 1.5 0 0 1 0 12.5v-9A1.5 1.5 0 0 1 1.5 2h8A1.5 1.5 0 0 1 11 3.5v2a.5.5 0 0 1-1 0v-2z"/>
                                <path fill-rule="evenodd" d="M4.146 8.354a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5H14.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3z"/>
                            </svg>
                        </div>
                    }
                </div>
            </div>
            @* <div style="float: left; width: 100px"></div> *@
            <div class="hidden-columns column-container">
                <p class="column-container-title">Other Columns</p>
                <div class="column-list">
                    @foreach (ColumnType columnType in Enum.GetValues<ColumnType>())
                    {
                        if (!_selectedColumnTypes.Contains(columnType))
                        {
                            if (_selectedType == columnType)
                            {
                                <div class="selectedColumnToInsert" onclick="@(() => SelectColumnHeader(columnType))">@HeaderGenerator.GetHeader(columnType)</div>
                            }
                            else
                            {
                                <div class="hiddenColumn" onclick="@(() => SelectColumnHeader(columnType))">@HeaderGenerator.GetHeader(columnType)</div>
                            }
                        }
                    }
                </div>
            </div>

        </div>
    </div>

    <div>
        <InputNumber TValue="int" @bind-Value="@this._obfuscationValueProperty">Randomly Obfuscated Fields</InputNumber>
    </div>
    <div>
        <InputNumber TValue="int" @bind-Value="@this._guessHistoryLimitProperty">Limit Visible Guess History</InputNumber>
    </div>
    <div>
        <InputCheckbox @bind-Value="@this._allowDuplicateGuessesProperty">Allow Duplicate Guesses</InputCheckbox>
    </div>
</div>


@code
{
    private int _obfuscationValueProperty { get => SharedSettings.Obfuscation; set => UpdateObfuscationValue(value); }
    private int _guessHistoryLimitProperty { get => SharedSettings.GuessHistoryLimit; set => UpdateGuessHistoryLimit(value); }
    private bool _allowDuplicateGuessesProperty { get => SharedSettings.AllowDuplicateGuesses; set => UpdateAllowDuplicateGuesses(value); }
    private readonly List<ColumnType> _selectedColumnTypes = SharedSettings.GameColumnTypes.ToList();
    private ColumnType? _selectedType = null;

    protected override async Task OnInitializedAsync()
    {

    }

    private void DisableColumnHeader(ColumnType columnType)
    {
        _selectedColumnTypes.Remove(columnType);
        UpdateColumnSettings();
        StateHasChanged();
    }

    private void EnableColumnHeader(ColumnType columnType, int index)
    {
        _selectedColumnTypes.Insert(index, columnType);
        UpdateColumnSettings();
        StateHasChanged();
    }

    private void InsertSelectedHeader(ColumnType before)
    {
        if (_selectedType is ColumnType columnType)
        {
            int index = _selectedColumnTypes.IndexOf(before);
            EnableColumnHeader(columnType, index);
            _selectedType = null;
        }
        StateHasChanged();
    }

    private void SelectColumnHeader(ColumnType columnType)
    {
        if (_selectedType != columnType)
        {
            _selectedType = columnType;
            StateHasChanged();
            return;
        }
        AppendSelectedHeader();
    }

    private void AppendSelectedHeader()
    {
        if (_selectedType is ColumnType columnType)
        {
            _selectedColumnTypes.Add(columnType);
            _selectedType = null;
            UpdateColumnSettings();
            StateHasChanged();
        }
    }

    private void UpdateColumnSettings()
    {
        SharedSettings.GameColumnTypes.Clear();
        SharedSettings.GameColumnTypes.AddRange(_selectedColumnTypes);
    }

    private void UpdateObfuscationValue(int value)
    {
        if (value < 0 && Enum.GetValues<ColumnType>().Count() > value)
        {
            return;
        }
        SharedSettings.Obfuscation = value;
    }

    private void UpdateGuessHistoryLimit(int value)
    {
        if (value < 0)
        {
            return;
        }
        SharedSettings.GuessHistoryLimit = value;
    }

    private void UpdateAllowDuplicateGuesses(bool value)
    {
        SharedSettings.AllowDuplicateGuesses = value;
    }

}